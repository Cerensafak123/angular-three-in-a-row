@import '~reset-css/_reset.scss';
@import 'fonts';

$remove-animation-duration: .55s !default;
$swap-animation-duration: .25s !default; 

$grid-columns-count: 9 !default;
$grid-rows-count: 9 !default;

$tile-padding: 10px !default;
$tile-size: 45px !default;

$grid-width: $grid-columns-count * $tile-size !default;
$grid-height: $grid-rows-count * $tile-size !default;

$button-height: 40px !default;
$button-font-size: 18px !default;

// Typography

@mixin text() {
  font-family: 'Roboto Condensed', Arial, sans-serif;
  font-size: 15px;
  font-weight: 300;
}

@mixin button-text() {
  @include text();

  font-size: $button-font-size;
  font-weight: 700;

  line-height: 1;
}

// Animations

@keyframes bounceOut {
  20% {
    transform: scale3d(.9, .9, .9);
  }

  50%, 55% {
    opacity: 1;
    transform: scale3d(1.1, 1.1, 1.1);
  }

  to {
    opacity: 0;
    transform: scale3d(.3, .3, .3);
  }
}

*, *:before, *:after {
  box-sizing: border-box;
}

body {
  @include text();
}

// General

.button {
  @include button-text();

  display: inline-block;
  cursor: pointer;

  padding: (($button-height - $button-font-size) / 2) 12px;
  
  white-space: nowrap;
  color: #996633;

  text-shadow: 0 1px 0 #fedd9b;
  transition: all 0.3s linear;
  background: -webkit-linear-gradient(top, #feda71 0%, #febb4a 100%);
  
  border: 1px solid #f5b74e;
  border-color: #f5b74e #e5a73e; 

  border-radius: 2px;
  box-shadow: 0 1px 1px #d3d3d3, inset 0 1px 0 #fee395;
  height: 38px;
}

// Components

grid {
  display: block;
  position: relative;

  width: $grid-width;
  height: $grid-height;

  margin: 20px auto 0 auto;
}

tile {
  display: block;
  position: absolute;

  height: $tile-size + ($tile-padding * 2);
  width: $tile-size + ($tile-padding * 2);
  cursor: pointer;

  padding: $tile-padding;
  transition: transform $swap-animation-duration ease-out;

  svg {
    display: block;
    
    margin-left: auto;
    margin-right: auto;

    max-height: $tile-size;
    max-width: $tile-size;
  }

  &.remove {
    svg {
      animation-name: bounceOut;
      animation-duration: $remove-animation-duration;
    }
  }

  @for $x from 1 through $grid-columns-count {
    @for $y from 1 through $grid-rows-count {
      $zeroOffsetX: $x - 1;
      $zeroOffsetY: $y - 1;

      $newX: ($tile-size + $tile-padding) * ($zeroOffsetX);
      $newY: ($tile-size + $tile-padding) * ($zeroOffsetY);

      &.position-#{$zeroOffsetX}-#{$zeroOffsetY} {
        transform: translate($newX, $newY);
        
        &.newbie { transform: translate($newX, -($grid-height - $newY)); }
      }
    }
  }
}

